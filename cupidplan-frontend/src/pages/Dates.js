import React, { useEffect, useState } from "react";
import "../styles/Dates.css";
import axios from "axios";
import confetti from "canvas-confetti";

const Dates = () => {
  const [folders, setFolders] = useState([]);
  const [expandedFolders, setExpandedFolders] = useState({});
  const [activeDate, setActiveDate] = useState(null);
  const [loading, setLoading] = useState(true);

  const currentUserEmail =
    localStorage.getItem("rememberedUser") || sessionStorage.getItem("loggedInUser");

  useEffect(() => {
    const fetchDates = async () => {
      try {
        const res = await axios.get(`http://localhost:5000/api/shared-dates/for/${currentUserEmail}`);
        if (res.data.success) {
          setFolders(res.data.grouped);
        }
      } catch (err) {
        console.error("❌ Error fetching grouped shared dates:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchDates();
  }, [currentUserEmail]);

  const toggleFolder = (email) => {
    setExpandedFolders((prev) => {
      const isOpening = !prev[email];

      if (isOpening) {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.3 },
          colors: [
            "#ff4d6d", "#ffd6e0", "#ffb3c1", "#ffe6ec",
            "#c9184a", "#ff7096", "#ffe5e9", "#d61c4e",
            "#9400D3", "#4B0082", "#191970", "#8B0000"
          ]
        });
      }

      return {
        ...prev,
        [email]: isOpening,
      };
    });
  };

  return (
    <div className="dates-page">
      <h1>📅 Shared Date Plans</h1>

      {loading ? (
        <p>Loading...</p>
      ) : folders.length === 0 ? (
        <p>No shared dates yet.</p>
      ) : (
        <div className="folder-list">
          {folders.map((folder, index) => (
            <div
              key={index}
              className={`folder-card ${expandedFolders[folder.partnerEmail] ? "open" : ""}`}
            >
              <div className="folder-header" onClick={() => toggleFolder(folder.partnerEmail)}>
                <span className="name-animated">✉️ {folder.partnerName}</span>
                <span className="arrow">{expandedFolders[folder.partnerEmail] ? "▲" : "▼"}</span>
              </div>

              <div
                className={`folder-content ${expandedFolders[folder.partnerEmail] ? "open" : ""}`}
              >
                {folder.dates.map((date, i) => (
                  <div key={i} className="date-item">
                    <div className="date-label">
                      <strong>Generated by:</strong>{" "}
                      <span>{date.isFromCurrentUser ? "You" : folder.partnerName}</span>
                    </div>
                    <button
                      onClick={() => setActiveDate(date.message)}
                      className="view-date-button"
                    >
                      View Plan
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {activeDate && (
        <div className="date-modal-overlay">
          <div className="date-modal">
            <h3>💖 Custom Date Plan</h3>
            <p style={{ whiteSpace: "pre-wrap" }}>{activeDate}</p>
            <button onClick={() => setActiveDate(null)} className="close-modal-button">
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dates;
